// Generated by CoffeeScript 1.7.1
var Client, Crypto, HTTP, HTTPS, Iconv, QS;

HTTP = require('http');

HTTPS = require('https');

Crypto = require('crypto');

Iconv = require('iconv-lite');

QS = require('qs');

Client = (function() {
  var REQUEST_CHARSET, SERVER_NAME, SERVER_PLAIN_PORT, SERVER_PROTO, SERVER_SECURE_PORT;

  SERVER_PROTO = 'http';

  SERVER_NAME = 'gate.smsaero.ru';

  SERVER_PLAIN_PORT = 80;

  SERVER_SECURE_PORT = 443;

  REQUEST_CHARSET = 'utf-8';

  function Client(options) {
    var _ref, _ref1, _ref2, _ref3;
    if (options == null) {
      options = Object.create(null);
    }
    this._proto = (_ref = options.proto) != null ? _ref : SERVER_PROTO;
    this._HTTP = this._proto === 'http' ? HTTP : HTTPS;
    this._host = (_ref1 = options.host) != null ? _ref1 : SERVER_NAME;
    this._port = (_ref2 = options.port) != null ? _ref2 : this._proto === 'http' ? SERVER_PLAIN_PORT : SERVER_SECURE_PORT;
    this._charset = (_ref3 = options.charset) != null ? _ref3 : REQUEST_CHARSET;
    this._userName = options.userName;
    this._hash = Crypto.createHash('md5').update(options.password).digest('hex');
  }

  Client.prototype._requestOptions = function(name, blob) {
    var headers, options, path;
    path = '/' + name + '/';
    headers = {
      'Content-Type': 'application/x-www-form-urlencoded; charset=' + this._charset,
      'Content-Length': blob.length
    };
    options = {
      host: this._host,
      port: this._port,
      method: 'POST',
      path: path,
      headers: headers
    };
    return options;
  };

  Client.prototype._responseHandler = function(callback) {
    return (function(_this) {
      return function(response) {
        var chunks;
        chunks = [];
        response.on('readable', function() {
          chunks.push(response.read());
        });
        response.on('end', function() {
          var blob, firstDigit, output;
          if (typeof callback !== 'function') {
            return;
          }
          blob = Buffer.concat(chunks);
          firstDigit = Math.floor(response.statusCode / 100);
          switch (firstDigit) {
            case 2:
              output = JSON.parse(Iconv.decode(blob, 'utf-8') || '{}');
              callback(null, output);
              break;
            default:
              callback(new Error('Unexpected status code'));
          }
        });
      };
    })(this);
  };

  Client.prototype._errorHandler = function(callback) {
    return (function(_this) {
      return function(error) {
        if (typeof callback === "function") {
          callback(error);
        }
      };
    })(this);
  };

  Client.prototype.invokeMethod = function(name, input, callback) {
    var blob, fullInput, key, request, value;
    fullInput = Object.create(null);
    fullInput.answer = 'json';
    fullInput.user = this._userName;
    fullInput.password = this._hash;
    for (key in input) {
      value = input[key];
      fullInput[key] = value;
    }
    blob = Iconv.encode(QS.stringify(fullInput), this._charset);
    request = this._HTTP.request(this._requestOptions(name, blob));
    request.on('response', this._responseHandler(callback));
    request.on('error', this._errorHandler(callback));
    request.end(blob);
    return this;
  };

  return Client;

})();

module.exports = Client;
